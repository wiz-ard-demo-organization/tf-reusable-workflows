name: 'Reusable TF Plan Apply Pipeline'

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory containing Terraform files'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      action:
        description: 'Pipeline action: plan (plan-only) or apply (plan+apply)'
        required: false
        type: string
        default: 'plan'
    outputs:
      terraform_outputs:
        description: 'Terraform outputs as JSON'
        value: ${{ jobs.terraform-apply.outputs.terraform_outputs }}

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read
  pull-requests: write

env:
  TF_VAR_subscription_id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_tenant_id: ${{ vars.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}

jobs:
  # Terraform Plan - Always runs for both plan and apply actions
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    outputs:
      plan-status: ${{ steps.plan.outcome }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az login --service-principal -u ${{ vars.AZURE_CLIENT_ID }} -t ${{ vars.AZURE_TENANT_ID }} --federated-token ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          az account set --subscription ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Terraform Format Check
      run: |
        cd ${{ inputs.working_directory }}
        terraform fmt -check
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init
          
    - name: Terraform Validate
      run: |
        cd ${{ inputs.working_directory }}
        terraform validate
        
    - name: Terraform Plan
      id: plan
      run: |
        cd ${{ inputs.working_directory }}
        terraform plan -detailed-exitcode -out=tfplan
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/tfplan
        retention-days: 5
        

  # Terraform Apply - Only runs when action is 'apply' and requires manual approval
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      always() && 
      needs.terraform-plan.result == 'success' &&
      inputs.action == 'apply' &&
      github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ inputs.environment }}
      url: https://portal.azure.com
      
    outputs:
      terraform_outputs: ${{ steps.outputs.outputs.terraform_outputs }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az login --service-principal -u ${{ vars.AZURE_CLIENT_ID }} -t ${{ vars.AZURE_TENANT_ID }} --federated-token ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          az account set --subscription ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init
          
    - name: Terraform Apply
      run: |
        cd ${{ inputs.working_directory }}
        terraform apply -auto-approve tfplan
        
    - name: Capture Terraform Outputs
      id: outputs
      run: |
        cd ${{ inputs.working_directory }}
        terraform output -json > terraform-outputs.json
        echo "terraform_outputs=$(cat terraform-outputs.json | jq -c .)" >> $GITHUB_OUTPUT
        
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/terraform-outputs.json
        retention-days: 30 