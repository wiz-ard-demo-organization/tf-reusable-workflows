name: 'Reusable TF Plan Apply Pipeline'

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory containing Terraform files'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      action:
        description: 'Pipeline action: plan (plan-only) or apply (plan+apply)'
        required: false
        type: string
        default: 'plan'
    outputs:
      terraform_outputs:
        description: 'Terraform outputs as JSON'
        value: ${{ jobs.terraform-apply.outputs.terraform_outputs }}

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read
  pull-requests: write

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

jobs:
  # Terraform Plan - Always runs for both plan and apply actions
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    outputs:
      plan-status: ${{ steps.plan.outcome }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ vars.ARM_CLIENT_ID }}
        tenant-id: ${{ vars.ARM_TENANT_ID }}
        subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
        
    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Create Terraform Plugin Cache Directory
      run: mkdir -p ~/.terraform.d/plugin-cache
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init
          
    - name: Terraform Validate
      run: |
        cd ${{ inputs.working_directory }}
        terraform validate
        
    - name: Terraform Plan
      id: plan
      run: |
        cd ${{ inputs.working_directory }}
        terraform plan -var-file="terraform.tfvars" -detailed-exitcode -out=tfplan

    - name: Cache Trivy
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/trivy
        key: ${{ runner.os }}-trivy-latest
        restore-keys: |
          ${{ runner.os }}-trivy-
          
    - name: Install Trivy
      run: |
        if [ ! -f /usr/local/bin/trivy ]; then
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          echo "Trivy installed and will be cached for future runs"
        else
          echo "Trivy restored from cache"
        fi

    - name: Run Trivy Security Scan
      run: |
        cd ${{ inputs.working_directory }}
        terraform show -json tfplan > tfplan.json
        trivy config tfplan.json --format table
        
    - name: Publish Trivy Output to Summary
      run: |
        cd ${{ inputs.working_directory }}
        if [[ -f tfplan.json ]]; then
          trivy config tfplan.json --format table > trivy-summary.txt
          {
            echo "### Trivy Security Scan Results"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```'
            cat trivy-summary.txt
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/tfplan
        retention-days: 5

  # Terraform Apply - Only runs when action is 'apply' and requires manual approval
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      always() && 
      needs.terraform-plan.result == 'success' &&
      inputs.action == 'apply' &&
      github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ inputs.environment }}
      
    outputs:
      terraform_outputs: ${{ steps.outputs.outputs.terraform_outputs }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ vars.ARM_CLIENT_ID }}
        tenant-id: ${{ vars.ARM_TENANT_ID }}
        subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          
    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Create Terraform Plugin Cache Directory
      run: mkdir -p ~/.terraform.d/plugin-cache
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init
          
    - name: Terraform Apply
      run: |
        cd ${{ inputs.working_directory }}
        terraform apply 
        
    - name: Capture Terraform Outputs
      id: outputs
      run: |
        cd ${{ inputs.working_directory }}
        terraform output -json > terraform-outputs.json
        echo "terraform_outputs=$(cat terraform-outputs.json | jq -c .)" >> $GITHUB_OUTPUT
        
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/terraform-outputs.json
        retention-days: 30 