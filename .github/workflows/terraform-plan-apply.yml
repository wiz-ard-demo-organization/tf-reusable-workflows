name: 'Reusable TF Plan Apply Destroy Pipeline'

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory containing Terraform files'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      action:
        description: 'Pipeline action: plan (plan-only), apply (plan+apply), or destroy (plan destroy+destroy)'
        required: false
        type: string
        default: 'plan'
    outputs:
      terraform_outputs:
        description: 'Terraform outputs as JSON'
        value: ${{ jobs.terraform-apply.outputs.terraform_outputs }}

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read
  pull-requests: write

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}

jobs:
  # Terraform Plan - Always runs for both plan and apply actions
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    outputs:
      plan-status: ${{ steps.plan.outcome }}
      plan-exit-code: ${{ steps.plan.outputs.exit-code }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ vars.ARM_CLIENT_ID }}
        tenant-id: ${{ vars.ARM_TENANT_ID }}
        subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init --upgrade
          
    - name: Terraform Validate
      run: |
        cd ${{ inputs.working_directory }}
        terraform validate
        
    - name: Terraform Plan
      id: plan
      run: |
        cd ${{ inputs.working_directory }}
        terraform plan -var-file="terraform.tfvars" -detailed-exitcode -out=tfplan
        status=$?
        echo "exit-code=$status" >> $GITHUB_OUTPUT
        if [ "$status" -eq 1 ]; then exit 1; fi

    - name: Plan Summary
      if: always()
      run: |
        cd ${{ inputs.working_directory }}
        EXIT_CODE="${{ steps.plan.outputs.exit-code }}"
        {
          echo "### Terraform Plan Results"
          if [ "$EXIT_CODE" = "0" ]; then
            echo "✅ **No changes required** - Infrastructure matches the desired configuration"
          elif [ "$EXIT_CODE" = "2" ]; then
            echo "📋 **Changes required** - Review the plan output above before applying"
            echo ""
            echo "This includes:"
            echo "- Creating new resources"
            echo "- Modifying existing resources"
            echo "- Destroying resources"
          elif [ "$EXIT_CODE" = "1" ]; then
            echo "❌ **Plan failed** - Check the logs above for errors"
          fi
          echo ""
        } >> $GITHUB_STEP_SUMMARY
          
    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Run Trivy Security Scan
      run: |
        cd ${{ inputs.working_directory }}
        terraform show -json tfplan > tfplan.json
        trivy config . --format table
        trivy config tfplan.json --format table
        
    - name: Publish Trivy Output to Summary
      run: |
        cd ${{ inputs.working_directory }}
        if [[ -f tfplan.json ]]; then
          trivy config . --format table > trivy-directory-summary.txt
          trivy config tfplan.json --format table > trivy-plan-summary.txt
          {
            echo "### Trivy Security Scan Results"
            echo "<details><summary>Directory Scan - Click to expand</summary>"
            echo ""
            echo '```'
            cat trivy-directory-summary.txt
            echo '```'
            echo "</details>"
            echo ""
            echo "<details><summary>Plan Scan - Click to expand</summary>"
            echo ""
            echo '```'
            cat trivy-plan-summary.txt
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY
        fi

    - name: Install Checkov
      run: |
        pip3 install checkov

    - name: Run Checkov Security Scan
      run: |
        cd ${{ inputs.working_directory }}
        # Scan directory for basic checks
        checkov -d . --framework terraform --output cli > checkov-directory-summary.txt || true
        # Scan the terraform plan JSON for comprehensive analysis
        if [[ -f tfplan.json ]]; then
          checkov -f tfplan.json --output cli > checkov-plan-summary.txt || true
        fi
        
    - name: Publish Checkov Output to Summary
      run: |
        cd ${{ inputs.working_directory }}
        {
          echo "### Checkov Security Scan Results"
          if [[ -f checkov-directory-summary.txt ]]; then
            echo "<details><summary>Directory Scan - Click to expand</summary>"
            echo ""
            echo '```'
            cat checkov-directory-summary.txt
            echo '```'
            echo "</details>"
            echo ""
          fi
          if [[ -f checkov-plan-summary.txt ]]; then
            echo "<details><summary>Plan Scan - Click to expand</summary>"
            echo ""
            echo '```'
            cat checkov-plan-summary.txt
            echo '```'
            echo "</details>"
          fi
        } >> $GITHUB_STEP_SUMMARY
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/tfplan
        retention-days: 5

  # Terraform Apply - Only runs when action is 'apply' and requires manual approval
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      always() && 
      needs.terraform-plan.result == 'success' &&
      inputs.action == 'apply' &&
      github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ inputs.environment }}
      
    outputs:
      terraform_outputs: ${{ steps.outputs.outputs.terraform_outputs }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ vars.ARM_CLIENT_ID }}
        tenant-id: ${{ vars.ARM_TENANT_ID }}
        subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init
          
    - name: Terraform Apply
      run: |
        cd ${{ inputs.working_directory }}
        terraform apply -input=false --auto-approve tfplan 
        
    - name: Capture Terraform Outputs
      id: outputs
      run: |
        cd ${{ inputs.working_directory }}
        terraform output -json > terraform-outputs.json
        echo "terraform_outputs=$(jq -c . terraform-outputs.json)" >> $GITHUB_OUTPUT
        
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-${{ inputs.environment }}
        path: ${{ inputs.working_directory }}/terraform-outputs.json
        retention-days: 30

  # Terraform Destroy - Only runs when action is 'destroy' and requires manual approval
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      inputs.action == 'destroy' &&
      github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ inputs.environment }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ vars.ARM_CLIENT_ID }}
        tenant-id: ${{ vars.ARM_TENANT_ID }}
        subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init
          
    - name: Destroy Plan Summary
      run: |
        cd ${{ inputs.working_directory }}
        {
          echo "### ⚠️ Terraform Destroy Plan"
          echo "**WARNING**: This will destroy all resources managed by this Terraform configuration."
          echo ""
          echo "Review the plan carefully before proceeding."
        } >> $GITHUB_STEP_SUMMARY
        
    - name: Terraform Destroy
      run: |
        cd ${{ inputs.working_directory }}
        terraform destroy --auto-approve
        
    - name: Destroy Completion Summary
      run: |
        {
          echo "### ✅ Terraform Destroy Completed"
          echo "All resources have been destroyed successfully."
          echo ""
          echo "Environment: ${{ inputs.environment }}"
          echo "Directory: ${{ inputs.working_directory }}"
          echo "Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        } >> $GITHUB_STEP_SUMMARY 