name: 'Reusable Terraform Security Scan'

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory containing Terraform files'
        required: true
        type: string

permissions:
  contents: read

jobs:
  terraform-security-scan:
    name: 'Terraform Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'  # Fixed version
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_directory }}
        terraform init -backend=false
        
    - name: Run Checkov Scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ inputs.working_directory }}
        framework: terraform
        output_format: cli
        soft_fail: true  # Don't fail on warnings
        skip_check: CKV_TF_1
        
    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Generate Terraform Plan
      run: |
        cd ${{ inputs.working_directory }}
        # Create a temporary backend override to use local state for security scanning
        cat > backend_override.tf << 'EOF'
        terraform {
          backend "local" {}
        }
        EOF
        
        # Re-initialize with local backend
        terraform init -reconfigure -input=false
        
        # Generate plan
        terraform plan -out=tfplan.out -input=false
        terraform show -json tfplan.out > tfplan.json
        
        # Clean up override file
        rm -f backend_override.tf
        
    - name: Run Trivy scan on Terraform plan
      run: |
        cd ${{ inputs.working_directory }}
        trivy config tfplan.json --format table
        
    - name: Publish Trivy Output to Summary
      run: |
        cd ${{ inputs.working_directory }}
        if [[ -f tfplan.json ]]; then
          trivy config tfplan.json --format table > trivy-summary.txt
          {
            echo "### Trivy Security Scan Results"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```'
            cat trivy-summary.txt
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Security Scan Summary
      if: always()
      run: |
        echo "Security scans completed for directory: ${{ inputs.working_directory }}"
        echo "Checkov scan status: ${{ steps.checkov.outcome }}"
        echo "Trivy scan completed - results available in job logs and workflow summary" 