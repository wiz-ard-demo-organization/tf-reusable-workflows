name: 'Reusable Container Build & Security Scan'

on:
  workflow_call:
    inputs:
      registry_name:
        description: 'Azure Container Registry name'
        required: true
        type: string
      image_name:
        description: 'Container image name'
        required: true
        type: string
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      build_context:
        description: 'Docker build context'
        required: false
        type: string
        default: '.'
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      image_tag:
        description: 'Custom image tag'
        required: false
        type: string
        default: ''
      go_version:
        description: 'Go version to use for testing'
        required: false
        type: string
        default: '1.19'
      run_tests:
        description: 'Run application tests'
        required: false
        type: boolean
        default: true
      validate_wizexercise:
        description: 'Validate wizexercise.txt file'
        required: false
        type: boolean
        default: false
    outputs:
      image_tag:
        description: 'Full image tag with registry'
        value: ${{ jobs.build-container.outputs.image_tag }}
      image_digest:
        description: 'Image digest'
        value: ${{ jobs.build-container.outputs.image_digest }}

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read
  security-events: write
  packages: write

env:
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}

jobs:
  # Application Security Scanning
  application-security-scan:
    name: 'Application Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Go
      if: inputs.run_tests
      uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go_version }}
        
    - name: Go Security Scan with Gosec
      if: inputs.run_tests
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
        
    - name: Upload Gosec SARIF
      if: always() && inputs.run_tests
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif
        category: gosec
        
    - name: Go Vulnerability Check
      if: inputs.run_tests
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        
    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Dockerfile Security Scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ inputs.dockerfile_path }}
        format: sarif
        output-file: hadolint-results.sarif
        
    - name: Upload Hadolint SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: hadolint-results.sarif
        category: hadolint

  # Build and Test Application
  build-and-test:
    name: 'Build & Test Application'
    runs-on: ubuntu-latest
    needs: application-security-scan
    if: inputs.run_tests
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go_version }}
        
    - name: Cache Go Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download Dependencies
      run: go mod download
      
    - name: Run Tests
      run: go test -v ./...
      
    - name: Build Application
      run: go build -v ./...
      
    - name: Verify wizexercise.txt exists
      if: inputs.validate_wizexercise
      run: |
        if [ ! -f "wizexercise.txt" ]; then
          echo "❌ wizexercise.txt file is missing!"
          exit 1
        fi
        echo "✅ wizexercise.txt file found"
        cat wizexercise.txt

  # Build Container Image
  build-container:
    name: 'Build Container Image'
    runs-on: ubuntu-latest
    needs: [application-security-scan, build-and-test]
    if: always() && (needs.build-and-test.result == 'success' || needs.build-and-test.result == 'skipped')
    environment: ${{ inputs.environment }}
    
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Azure Login via OIDC
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az login --service-principal -u ${{ vars.AZURE_CLIENT_ID }} -t ${{ vars.AZURE_TENANT_ID }} --federated-token ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          az account set --subscription ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ inputs.registry_name }}
        
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry_name }}.azurecr.io/${{ inputs.image_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
          
    - name: Build and Push Container Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile_path }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Container Security Scanning
  container-security-scan:
    name: 'Container Security Scan'
    runs-on: ubuntu-latest
    needs: build-container
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Azure Login via OIDC
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az login --service-principal -u ${{ vars.AZURE_CLIENT_ID }} -t ${{ vars.AZURE_TENANT_ID }} --federated-token ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          az account set --subscription ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ inputs.registry_name }}
        
    - name: Run Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-container.outputs.image_tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
        category: trivy
        
    - name: Run Grype Container Scan
      uses: anchore/scan-action@v3
      with:
        image: ${{ needs.build-container.outputs.image_tag }}
        fail-build: false
        
    - name: Validate wizexercise.txt in Container
      if: inputs.validate_wizexercise
      run: |
        docker run --rm --entrypoint="" ${{ needs.build-container.outputs.image_tag }} \
          sh -c 'ls -la /app/wizexercise.txt && cat /app/wizexercise.txt' 